import java.util.*;

public class ThreeSumSolutions {
    // Brute Force (Triple Nested Loops) Solution
    public static void bruteForce(int[] nums) {
        int n = nums.length;
        Set<List<Integer>> result = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    int[] triplet = {nums[i], nums[j], nums[k]};
                    Arrays.sort(triplet);
                    if (triplet[0] + triplet[1] + triplet[2] == 0) {
                        result.add(Arrays.asList(triplet[0], triplet[1], triplet[2]));
                    }
                }
            }
        }
        for (List<Integer> triplet : result) {
            System.out.println(triplet.get(0) + " " + triplet.get(1) + " " + triplet.get(2));
        }
    }

    // Hashing (Two Sum for Each Element) Solution
    public static void hashingTwoSum(int[] nums) {
        int n = nums.length;
        Set<List<Integer>> result = new HashSet<>();
        for (int i = 0; i < n; i++) {
            Set<Integer> seen = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                int complement = -nums[i] - nums[j];
                if (seen.contains(complement)) {
                    int[] triplet = {nums[i], nums[j], complement};
                    Arrays.sort(triplet);
                    result.add(Arrays.asList(triplet[0], triplet[1], triplet[2]));
                }
                seen.add(nums[j]);
            }
        }
        for (List<Integer> triplet : result) {
            System.out.println(triplet.get(0) + " " + triplet.get(1) + " " + triplet.get(2));
        }
    }

    // Sorting + Two Pointers (Optimal) Solution
    public static void twoPointers(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        Set<List<Integer>> result = new HashSet<>();
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            int left = i + 1, right = n - 1;
            while (left < right) {
                int total = nums[i] + nums[left] + nums[right];
                if (total == 0) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left++;
                    right--;
                    while (left < right && nums[left] == nums[left - 1]) left++;
                    while (left < right && nums[right] == nums[right + 1]) right--;
                } else if (total < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        for (List<Integer> triplet : result) {
            System.out.println(triplet.get(0) + " " + triplet.get(1) + " " + triplet.get(2));
        }
    }

    // Counter-based Solution (like Python's Counter)
    public static void counterBased(int[] nums) {
        Map<Integer, Integer> count = new HashMap<>();
        for (int num : nums) count.put(num, count.getOrDefault(num, 0) + 1);
        List<Integer> unique = new ArrayList<>(count.keySet());
        Collections.sort(unique);
        Set<List<Integer>> result = new HashSet<>();
        int len = unique.size();
        for (int i = 0; i < len; i++) {
            int a = unique.get(i);
            for (int j = i; j < len; j++) {
                int b = unique.get(j);
                int c = -a - b;
                if (c < b) continue;
                if (!count.containsKey(c)) continue;
                if (a == b && b == c && count.get(a) >= 3) {
                    result.add(Arrays.asList(a, b, c));
                } else if (a == b && a != c && count.get(a) >= 2) {
                    result.add(Arrays.asList(a, b, c));
                } else if (b == c && a != b && count.get(b) >= 2) {
                    result.add(Arrays.asList(a, b, c));
                } else if (a != b && b != c && a != c) {
                    result.add(Arrays.asList(a, b, c));
                }
            }
        }
        for (List<Integer> triplet : result) {
            System.out.println(triplet.get(0) + " " + triplet.get(1) + " " + triplet.get(2));
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) nums[i] = sc.nextInt();

        // Uncomment the method you want to run:

        // bruteForce(nums);
        // hashingTwoSum(nums);
        // twoPointers(nums);
        // counterBased(nums);
    }
}