"Linked List Cycle", 
"Given a linked list, determine if it has a cycle.", 
"Easy", 
"LeetCode, InterviewBit"
"Amazon, Google, Microsoft"

---

Problem Title:
Linked List Cycle

Problem Description:
Given a linked list, determine if it contains a cycle. A cycle occurs when a node's next pointer points to a previous node in the list, forming a loop. Your task is to return true if a cycle exists in the linked list, otherwise return false.

Input Format:
- The first line contains an integer n, the number of nodes in the linked list.
- The second line contains n space-separated integers, representing the node values.
- The third line contains an integer pos, indicating the index (0-based) of the node that the last node's next pointer points to. If pos is -1, there is no cycle.

Output Format:
- Output "true" if the linked list contains a cycle, otherwise output "false".

Constraints:
- 0 <= n <= 10^4
- -10^9 <= Node value <= 10^9
- -1 <= pos < n

Sample Input 1:
3
1 2 3
1

Sample Output 1:
true

Explanation 1:
The last node (with value 3) points to the node at index 1 (with value 2), forming a cycle.

Sample Input 2:
4
1 2 3 4
-1

Sample Output 2:
false

Explanation 2:
The last node points to null, so there is no cycle.

Difficulty:
Easy

Five Test Cases:
Test Case 1:
Input:
5
1 2 3 4 5
2
Output:
true

Test Case 2:
Input:
2
1 2
-1
Output:
false

Test Case 3:
Input:
0

-1
Output:
false

Test Case 4:
Input:
1
10
0
Output:
true

Test Case 5:
Input:
6
1 2 3 4 5 6
-1
Output:
false

---

Solution Techniques:

1. Hash Set / Visited Nodes Approach:
    - Traverse the linked list and store each visited node in a hash set.
    - If a node is revisited (already in the set), a cycle exists.
    - Time Complexity: O(n)
    - Space Complexity: O(n)

2. Floydâ€™s Tortoise and Hare (Two Pointers) Algorithm:
    - Use two pointers: slow moves one step, fast moves two steps.
    - If there is a cycle, the fast pointer will eventually meet the slow pointer.
    - If fast reaches the end (null), there is no cycle.
    - Time Complexity: O(n)
    - Space Complexity: O(1)

3. Modifying Node Structure (Marking Visited):
    - Temporarily modify the node structure (e.g., add a visited flag).
    - Not recommended if the node structure cannot be changed or must remain unmodified.
    - Time Complexity: O(n)
    - Space Complexity: O(1)
    - Note: This approach is generally discouraged.
