"Merge Two Sorted Lists", 
"Merge two sorted linked lists and return it as a new sorted list.", 
"Easy", 
"LeetCode, GeeksforGeeks"
"Amazon, Microsoft, Facebook"

---

Problem Title:
Merge Two Sorted Lists

Problem Description:
Given the heads of two sorted linked lists, merge them into a single sorted linked list. The merged list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.

Input Format:
- The first line contains the number of nodes in the first linked list, n1.
- The second line contains n1 space-separated integers representing the elements of the first linked list in sorted order.
- The third line contains the number of nodes in the second linked list, n2.
- The fourth line contains n2 space-separated integers representing the elements of the second linked list in sorted order.

Output Format:
- Output a single line containing the elements of the merged sorted linked list, space-separated.

Constraints:
- 0 <= n1, n2 <= 100
- -100 <= Node Value <= 100
- The input lists are sorted in non-decreasing order.

Sample Input:
3
1 2 4
3
1 3 4

Sample Output:
1 1 2 3 4 4

Explanation:
The two lists [1,2,4] and [1,3,4] are merged into [1,1,2,3,4,4].

Difficulty:
Easy

Test Cases:
Test Case 1:
Input:
2
2 5
3
1 3 4
Output:
1 2 3 4 5

Test Case 2:
Input:
0

2
0 1
Output:
0 1

Test Case 3:
Input:
3
-3 0 2
2
-2 1
Output:
-3 -2 0 1 2

Test Case 4:
Input:
1
5
1
5
Output:
5 5

Test Case 5:
Input:
0

0

Output:

---

Solution Techniques:

1. Iterative Merge Using Dummy Node:
    - Create a dummy node to simplify edge cases.
    - Use two pointers to traverse both lists.
    - At each step, append the smaller node to the merged list.
    - Continue until one list is exhausted, then append the remainder of the other list.
    - Time Complexity: O(n1 + n2)
    - Space Complexity: O(1) (excluding output list)

2. Recursive Merge:
    - Recursively compare the heads of both lists.
    - The smaller node becomes the head, and recursively merge the rest.
    - Base case: if either list is empty, return the other.
    - Time Complexity: O(n1 + n2)
    - Space Complexity: O(n1 + n2) (due to recursion stack)

3. Concatenate and Sort:
    - Concatenate both lists into a single list.
    - Sort the combined list.
    - Time Complexity: O((n1 + n2) log(n1 + n2))
    - Space Complexity: O(n1 + n2)

4. Using Priority Queue (Min-Heap):
    - Insert all nodes into a min-heap.
    - Extract nodes in sorted order to form the merged list.
    - Time Complexity: O((n1 + n2) log(n1 + n2))
    - Space Complexity: O(n1 + n2)
