"Reverse Linked List", 
"Reverse a singly linked list.", 
"Easy", 
"LeetCode, GeeksforGeeks"
"Amazon, Microsoft, Google"

---

Problem Title:
Reverse Linked List

Problem Description:
Given the head of a singly linked list, reverse the list, and return the head of the reversed linked list.

Input Format:
- The first line contains an integer n, the number of nodes in the linked list.
- The second line contains n space-separated integers, representing the values of the nodes in order.

Output Format:
- Print the values of the reversed linked list as space-separated integers in a single line.

Constraints:
- 1 <= n <= 10^4
- -10^5 <= Node value <= 10^5

Sample Input:
5
1 2 3 4 5

Sample Output:
5 4 3 2 1

Explanation:
The original linked list is 1 -> 2 -> 3 -> 4 -> 5. After reversing, it becomes 5 -> 4 -> 3 -> 2 -> 1.

Difficulty:
Easy

Five Test Cases:
Test Case 1:
Input:
3
10 20 30
Output:
30 20 10

Test Case 2:
Input:
1
42
Output:
42

Test Case 3:
Input:
4
-1 0 1 2
Output:
2 1 0 -1

Test Case 4:
Input:
6
5 4 3 2 1 0
Output:
0 1 2 3 4 5

Test Case 5:
Input:
2
100 -100
Output:
-100 100

---

Solution Techniques:

1. Iterative Approach:
- Initialize three pointers: prev (None), curr (head), next (None).
- Traverse the list, at each step reverse the next pointer of curr to prev.
- Move prev and curr one step forward.
- At the end, prev will be the new head.
- Time Complexity: O(n)
- Space Complexity: O(1)

2. Recursive Approach:
- Recursively reverse the rest of the list.
- Set head.next.next = head and head.next = None.
- Return the new head from recursion.
- Time Complexity: O(n)
- Space Complexity: O(n) (due to recursion stack)

3. Using Stack:
- Push all nodes onto a stack.
- Pop nodes and rebuild the list in reverse order.
- Time Complexity: O(n)
- Space Complexity: O(n)
