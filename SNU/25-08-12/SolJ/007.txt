import java.util.*;

// Recursive Solution (Brute Force)
class RecursiveSolution {
    public static int maxRobRecursive(int[] nums, int i) {
        if (i >= nums.length) return 0;
        int skip = maxRobRecursive(nums, i + 1);
        int rob = nums[i] + maxRobRecursive(nums, i + 2);
        return Math.max(skip, rob);
    }
}

// Top-Down Dynamic Programming (Memoization)
class MemoizationSolution {
    public static int maxRobMemo(int[] nums) {
        Map<Integer, Integer> memo = new HashMap<>();
        return dp(nums, 0, memo);
    }

    private static int dp(int[] nums, int i, Map<Integer, Integer> memo) {
        if (i >= nums.length) return 0;
        if (memo.containsKey(i)) return memo.get(i);
        int skip = dp(nums, i + 1, memo);
        int rob = nums[i] + dp(nums, i + 2, memo);
        int res = Math.max(skip, rob);
        memo.put(i, res);
        return res;
    }
}

// Bottom-Up Dynamic Programming (Tabulation)
class TabulationSolution {
    public static int maxRobTabulation(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];
        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
        }
        return dp[n - 1];
    }
}

// Space Optimized Dynamic Programming
class SpaceOptimizedSolution {
    public static int maxRobSpaceOptimized(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];
        int prev2 = nums[0];
        int prev1 = Math.max(nums[0], nums[1]);
        for (int i = 2; i < n; i++) {
            int curr = Math.max(prev1, prev2 + nums[i]);
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }

        // Uncomment the solution you want to use:

        // Recursive Solution (Brute Force)
        // System.out.println(RecursiveSolution.maxRobRecursive(nums, 0));

        // Top-Down Dynamic Programming (Memoization)
        // System.out.println(MemoizationSolution.maxRobMemo(nums));

        // Bottom-Up Dynamic Programming (Tabulation)
        // System.out.println(TabulationSolution.maxRobTabulation(nums));

        // Space Optimized Dynamic Programming
        System.out.println(SpaceOptimizedSolution.maxRobSpaceOptimized(nums));
    }
}