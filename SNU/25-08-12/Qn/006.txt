"Climbing Stairs", 
"Given n steps, each time you can climb 1 or 2 steps. Find how many distinct ways you can climb to the top.", 
"Easy", 
"LeetCode, GeeksforGeeks"
"Amazon, Microsoft"

---

Problem Title:
Climbing Stairs

Problem Description:
You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Input Format:
- A single integer n, representing the total number of steps.

Output Format:
- A single integer, the number of distinct ways to climb to the top.

Constraints:
- 1 <= n <= 45

Sample Input 1:
2

Sample Output 1:
2

Sample Explanation 1:
There are two ways to climb to the top:
1. 1 step + 1 step
2. 2 steps

Sample Input 2:
3

Sample Output 2:
3

Sample Explanation 2:
There are three ways to climb to the top:
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Difficulty:
Easy

Five Test Cases:
Test Case 1:
Input: 1
Output: 1

Test Case 2:
Input: 2
Output: 2

Test Case 3:
Input: 3
Output: 3

Test Case 4:
Input: 4
Output: 5

Test Case 5:
Input: 5
Output: 8

---

Solution Techniques:

1. Recursive Solution (Brute Force):
- Recursively try taking 1 or 2 steps at each stage.
- Time Complexity: O(2^n)
- Space Complexity: O(n) (call stack)

2. Recursive Solution with Memoization (Top-Down DP):
- Use a cache to store results for each step to avoid recomputation.
- Time Complexity: O(n)
- Space Complexity: O(n)

3. Dynamic Programming (Bottom-Up DP):
- Use an array dp[] where dp[i] = dp[i-1] + dp[i-2].
- Time Complexity: O(n)
- Space Complexity: O(n)

4. Space Optimized Dynamic Programming:
- Only keep track of the last two results instead of the whole array.
- Time Complexity: O(n)
- Space Complexity: O(1)
