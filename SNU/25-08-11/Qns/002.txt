 "Container With Most Water", 
"Given n non-negative integers representing the heights of vertical lines, find two lines that together with the x-axis form a container, such that the container contains the most water.", 
"Medium", 
"LeetCode, HackerRank" 
    Container With Most Water: https://lnkd.in/gY2vxRMn
"Google, Amazon, Apple"

---

Problem Title:
Container With Most Water

Problem Description:
Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i are at (i, ai) and (i, 0). Find two lines, together with the x-axis, that form a container such that the container contains the most water.

Input Format:
- The first line contains an integer n, the number of vertical lines.
- The second line contains n space-separated non-negative integers representing the heights of the lines.

Output Format:
- Print a single integer, the maximum amount of water a container can store.

Constraints:
- 2 ≤ n ≤ 10^5
- 0 ≤ ai ≤ 10^4

Sample Input:
9
1 8 6 2 5 4 8 3 7

Sample Output:
49

Explanation:
The lines at positions 2 and 9 (heights 8 and 7) form a container with the most water. The area is min(8, 7) * (9 - 2) = 7 * 7 = 49.

Difficulty:
Medium

Test Cases:
1.
Input:
2
1 1
Output:
1

2.
Input:
5
1 2 1 2 1
Output:
4

3.
Input:
6
4 3 2 1 4 2
Output:
16

4.
Input:
8
1 3 2 5 25 24 5 1
Output:
24

5.
Input:
10
1 2 3 4 5 6 7 8 9 10
Output:
25

---

Solution Techniques:

1. Brute Force:
    - Check all possible pairs of lines (i, j) and calculate the area for each pair.
    - Keep track of the maximum area found.
    - Time Complexity: O(n^2)
    - Space Complexity: O(1)

2. Two Pointer Approach:
    - Initialize two pointers, one at the beginning (left) and one at the end (right) of the array.
    - Calculate the area formed by the lines at the two pointers.
    - Move the pointer pointing to the shorter line inward, as this may increase the area.
    - Repeat until the pointers meet.
    - Time Complexity: O(n)
    - Space Complexity: O(1)

3. Stack-Based Approach (less common for this problem):
    - Use a stack to keep track of indices of lines.
    - For each line, compare with previous lines in the stack to calculate possible areas.
    - Not as efficient or straightforward as the two-pointer method.
    - Time Complexity: O(n)
    - Space Complexity: O(n)
