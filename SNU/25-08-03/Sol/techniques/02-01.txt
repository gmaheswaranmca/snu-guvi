Solution Techniques:

1. Sorting:
    - Sort the array in descending order and pick the kth element.
    - Time Complexity: O(n log n)
    - Space Complexity: O(1) (if sorting in-place)

2. Min-Heap of size k:
    - Maintain a min-heap of size k. Iterate through the array, pushing elements into the heap. If the heap size exceeds k, pop the smallest element. The root of the heap is the kth largest.
    - Time Complexity: O(n log k)
    - Space Complexity: O(k)

3. Quickselect (Partition-based selection):
    - Use the Quickselect algorithm to find the kth largest element without fully sorting the array.
    - Average Time Complexity: O(n)
    - Worst-case Time Complexity: O(n^2)
    - Space Complexity: O(1) (in-place)

4. Max-Heap:
    - Build a max-heap from the array and extract the maximum k times.
    - Time Complexity: O(n + k log n)
    - Space Complexity: O(n)


---

