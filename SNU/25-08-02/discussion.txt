class Solution {
public:
    void calculateSubsets(vector<vector<int>>& ans, vector<int>& nums, vector<int>& temp, int index) {
        if (index == nums.size()) {
            ans.push_back(temp);
            return;
        }

        temp.push_back(nums[index]);
        calculateSubsets(ans, nums, temp, index + 1);

        temp.pop_back();
        calculateSubsets(ans, nums, temp, index + 1);
    }


    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> temp;
        calculateSubsets(ans, nums, temp, 0);
        return ans;
    }
}

10 20 30                        ans = [10 20 30] [10 20] [10 30] [10] [30] [] [20 30] [20] [30]

[]0
    ->[10]1
            ->[10 20]2
                    ->[10 20 30]3
                    <-[10 20]3
            <-
            [10]2
                ->[10 30]3
                <-[10] 3
            <-
            []2 
                -->[30]3
                <-[]3
            <-
        <-
    <-[20]2
        ->[20 30]3
        <-[20] 3
    <-
    ->[30]

--------------------------------------------
                            [10 20 30] [10 20] [10 30] [10] [20 30] [20] [30] []
0[]
    ->1[10]
        ->2[10 20]
            ->3 [10 20 30]
            <-3 [10 20]
        <-2[10] 
            ->3[10 30] 
            <-3[10]
    <-1[] 
        ->2[20]
            ->3[20 30]
            <-3[20]
        <-2[]
            ->3[30]
            <-3[]
<-  

 0  1  2       
10 20 30

for mask in range(1, 1 << n): #1 .. <8
    subset = []
    for i in range(n):  # 0 1 2
        if mask & (1 << i): 0001  
            subset.append(arr[i])
    subsets.append(subset)
    
0001  & (1 << 0)    0001 & 0001 = 0001 [10]

0001 [10]
0010 [20]
0011 [10 20]
0100 [30]
0101 [10 30]
0110 [20 30]
0111 [10 20 30]


[10] 
20
[20] [10 20]
30

solution 
[]
[] [10]
[] [10] [20] [10 20]
[] [10] [20] [10 20] [30] [10 30] [20 30] [10 20 30]


10 20 30 40 = 60
map: 10:0,20:1,30:2 
3 2
vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp; /e : i
        vector<int> ans; // 2 index contained arr 
        for (int i = 0; i < nums.size(); i++) {
            if (mp.find(target - nums[i]) != mp.end()) {                
                ans.push_back(mp[target - nums[i]]);
                ans.push_back(i);
                break;
            }
            mp[nums[i]] = i;
        }
        return ans;
    }

    